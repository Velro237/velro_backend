# Generated by Django 5.2.3 on 2025-09-09 08:09

from django.db import migrations
import json


def convert_profile_locations(apps, schema_editor):
    """
    Convert existing profile location data from city_of_residence/issue_country to the new LocationData format
    """
    Profile = apps.get_model('users', 'Profile')
    LocationData = apps.get_model('listings', 'LocationData')
    
    for profile in Profile.objects.filter(user_location__isnull=True):
        # Check if we have legacy city_of_residence data
        if profile.city_of_residence:
            city = profile.city_of_residence
            country = city.country
            
            # Create or get LocationData for the city
            location_data, created = LocationData.objects.get_or_create(
                name=city.name,
                country=country.name,
                country_code=country.code[:2]  # Take first 2 chars of country code
            )
            
            # Link to profile
            profile.user_location = location_data
            
            # Also store in preferences for backward compatibility
            try:
                preferences = json.loads(profile.preferences) if profile.preferences and profile.preferences.strip() else {}
            except (json.JSONDecodeError, TypeError):
                preferences = {}
                
            if not isinstance(preferences, dict):
                preferences = {}
                
            preferences['location'] = {
                'id': location_data.id,
                'name': location_data.name,
                'country': location_data.country,
                'country_code': location_data.country_code
            }
            
            profile.preferences = json.dumps(preferences)
            profile.save()
        
        # If no city but we have country info in the profile
        elif profile.country_of_residence and profile.country_of_residence.strip():
            country_name = profile.country_of_residence
            
            # Create or get LocationData for the country
            location_data, created = LocationData.objects.get_or_create(
                name=country_name,  # Use country name as the city name
                country=country_name,
                country_code="00"  # Default country code
            )
            
            # Link to profile
            profile.user_location = location_data
            
            # Also store in preferences for backward compatibility
            try:
                preferences = json.loads(profile.preferences) if profile.preferences and profile.preferences.strip() else {}
            except (json.JSONDecodeError, TypeError):
                preferences = {}
                
            if not isinstance(preferences, dict):
                preferences = {}
                
            preferences['location'] = {
                'id': location_data.id,
                'name': location_data.name,
                'country': location_data.country,
                'country_code': location_data.country_code
            }
            
            profile.preferences = json.dumps(preferences)
            profile.save()


def reverse_convert_profile_locations(apps, schema_editor):
    """
    No-op reverse function since we want to keep the data in the new format
    """
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0013_profile_user_location'),
        ('listings', '0011_remove_legacy_fields'),
    ]

    operations = [
        migrations.RunPython(convert_profile_locations, reverse_convert_profile_locations),
    ]
