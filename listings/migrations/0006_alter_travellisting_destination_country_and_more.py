# Generated by Django 5.2.3 on 2025-06-16 08:24

import django.db.models.deletion
from django.db import migrations, models

def create_countries_and_regions(apps, schema_editor):
    Country = apps.get_model('listings', 'Country')
    Region = apps.get_model('listings', 'Region')
    TravelListing = apps.get_model('listings', 'TravelListing')

    # Get all unique country and region values from existing travel listings
    countries = set()
    regions = set()
    
    for listing in TravelListing.objects.all():
        countries.add(listing.pickup_country)
        countries.add(listing.destination_country)
        regions.add(listing.pickup_region)
        regions.add(listing.destination_region)

    # Create countries
    country_map = {}
    for country_name in countries:
        if country_name:  # Skip empty values
            country, _ = Country.objects.get_or_create(
                name=country_name,
                code=country_name[:3].upper()  # Use first 3 letters as code
            )
            country_map[country_name] = country

    # Create regions
    region_map = {}
    for region_name in regions:
        if region_name:  # Skip empty values
            # For now, associate all regions with the first country
            # You can update this later through the admin interface
            default_country = next(iter(country_map.values())) if country_map else None
            if default_country:
                region, _ = Region.objects.get_or_create(
                    name=region_name,
                    country=default_country
                )
                region_map[region_name] = region

    # Update travel listings with new foreign keys
    for listing in TravelListing.objects.all():
        if listing.pickup_country in country_map:
            listing.new_pickup_country = country_map[listing.pickup_country]
        if listing.destination_country in country_map:
            listing.new_destination_country = country_map[listing.destination_country]
        if listing.pickup_region in region_map:
            listing.new_pickup_region = region_map[listing.pickup_region]
        if listing.destination_region in region_map:
            listing.new_destination_region = region_map[listing.destination_region]
        listing.save()

class Migration(migrations.Migration):

    dependencies = [
        ('listings', '0005_country_region'),
    ]

    operations = [
        # First create the new fields as nullable
        migrations.AddField(
            model_name='travellisting',
            name='new_pickup_country',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='pickup_listings', to='listings.country'),
        ),
        migrations.AddField(
            model_name='travellisting',
            name='new_pickup_region',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='pickup_listings', to='listings.region'),
        ),
        migrations.AddField(
            model_name='travellisting',
            name='new_destination_country',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='destination_listings', to='listings.country'),
        ),
        migrations.AddField(
            model_name='travellisting',
            name='new_destination_region',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='destination_listings', to='listings.region'),
        ),
        
        # Run the data migration
        migrations.RunPython(create_countries_and_regions),
        
        # Remove the old fields
        migrations.RemoveField(
            model_name='travellisting',
            name='pickup_country',
        ),
        migrations.RemoveField(
            model_name='travellisting',
            name='pickup_region',
        ),
        migrations.RemoveField(
            model_name='travellisting',
            name='destination_country',
        ),
        migrations.RemoveField(
            model_name='travellisting',
            name='destination_region',
        ),
        
        # Rename the new fields
        migrations.RenameField(
            model_name='travellisting',
            old_name='new_pickup_country',
            new_name='pickup_country',
        ),
        migrations.RenameField(
            model_name='travellisting',
            old_name='new_pickup_region',
            new_name='pickup_region',
        ),
        migrations.RenameField(
            model_name='travellisting',
            old_name='new_destination_country',
            new_name='destination_country',
        ),
        migrations.RenameField(
            model_name='travellisting',
            old_name='new_destination_region',
            new_name='destination_region',
        ),
        
        # Make the fields non-nullable
        migrations.AlterField(
            model_name='travellisting',
            name='pickup_country',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='pickup_listings', to='listings.country'),
        ),
        migrations.AlterField(
            model_name='travellisting',
            name='pickup_region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='pickup_listings', to='listings.region'),
        ),
        migrations.AlterField(
            model_name='travellisting',
            name='destination_country',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='destination_listings', to='listings.country'),
        ),
        migrations.AlterField(
            model_name='travellisting',
            name='destination_region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='destination_listings', to='listings.region'),
        ),
        
        # Update mode_of_transport choices
        migrations.AlterField(
            model_name='travellisting',
            name='mode_of_transport',
            field=models.CharField(choices=[('plane', 'Plane'), ('bus', 'Bus'), ('train', 'Train'), ('ship', 'Ship'), ('car', 'Car'), ('motorcycle', 'Motorcycle'), ('bicycle', 'Bicycle'), ('other', 'Other')], max_length=20),
        ),
    ]
